{"version":3,"sources":["components/PostsDisplay.js","actions/AddPostAction.js","actions/types.js","components/Form.js","reducers/addPostReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["PostsDisplay","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","react_default","a","createElement","key","id","title","body","Component","connect","state","listItems","listItem","dispatch","fetch","then","res","json","type","payload","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","defineProperty","target","name","value","onSubmit","preventDefault","createPost","placeholder","postData","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","App","es","className","components_Form","components_PostsDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0baa4e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/AddPostAction';\r\n\r\nclass PostsDisplay extends Component {\r\n\tcomponentWillMount() {\r\n\t    this.props.fetchPosts();\r\n\t }\r\n\r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t    if (nextProps.newPost) {\r\n\t      this.props.posts.unshift(nextProps.newPost);\r\n\t    }\r\n\t}\r\n\t\r\n\r\n\trender() {\r\n\t\tconst postItems = this.props.posts.map( post => (\r\n\t\t\t\t<div key={post.id}>\r\n\t\t\t\t\t<h3>{post.title}</h3>\r\n\t\t\t\t\t<p>{post.body}</p>\t\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{postItems}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.listItems,\r\n  newPost: state.posts.listItem\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(PostsDisplay);","import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  fetch('https://jsonplaceholder.typicode.com/posts')\r\n    .then(res => res.json())\r\n    .then(posts =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: posts\r\n      })\r\n    );\r\n};\r\n\r\nexport const createPost = postData => dispatch => {\r\n  fetch('https://jsonplaceholder.typicode.com/posts', {\r\n    method: 'POST',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify(postData)\r\n  })\r\n    .then(res => res.json())\r\n    .then(post =>\r\n      dispatch({\r\n        type: NEW_POST,\r\n        payload: post\r\n      })\r\n    );\r\n};","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/AddPostAction';\r\n\r\nclass Form extends Component {\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = {\r\n\t      title: '',\r\n\t      body: ''\r\n    \t}\r\n    };\r\n\r\n\tonChange = (e) => {\r\n    \tthis.setState({ [e.target.name]: e.target.value });\r\n  \t};\r\n\t\r\n\tonSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst post = {\r\n\t\t\ttitle: this.state.title,\r\n\t\t\tbody: this.state.body\r\n\t\t};\r\n\r\n\t\tthis.props.createPost(post);\r\n  \t};\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit={this.onSubmit}>\r\n\t\t\t\t\t<input name=\"title\" type=\"text\" value={this.state.title} onChange={this.onChange} placeholder=\"Enter Title Here\"/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<textarea name=\"body\" type=\"text\" value={this.state.body} onChange={this.onChange} placeholder=\"Enter Post Body Here\"/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<button type=\"submit\">Submit</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(null, { createPost })(Form);","import { FETCH_POSTS, NEW_POST } from '../actions/types';\r\n\r\nconst initialState = {\r\n\tlistItems: [],\r\n\tlistItem: []\r\n}\r\n\r\nexport default function(state=initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase NEW_POST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tlistItem: action.payload\r\n\t\t\t}\r\n\t\tcase FETCH_POSTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tlistItems: action.payload\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { combineReducers } from 'redux';\r\nimport addPostReducer from './addPostReducer';\r\n\r\nexport default combineReducers({\r\n  posts: addPostReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore (\r\n\trootReducer,\r\n\tinitialState,\r\n\tcompose( \r\n\t\tapplyMiddleware(...middleware)\r\n\t\t// window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() \r\n\t)\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport PostsDisplay from './components/PostsDisplay';\nimport Form from './components/Form';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Form />\n        <PostsDisplay />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}